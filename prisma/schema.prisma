// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String
  password  String
  role      Role     @default(STUDENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdCourses Course[]       @relation("CourseInstructor")
  enrollments    Enrollment[]
  progress       Progress[]
  notifications  Notification[]
  quizAttempts   QuizAttempt[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  thumbnail   String?
  playlistUrl String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  instructorId String
  instructor   User         @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  lessons      Lesson[]
  enrollments  Enrollment[]
  quizzes      Quiz[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  thumbnail   String?
  duration    String
  order       Int
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId String
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("lessons")
}

model Enrollment {
  id           String    @id @default(cuid())
  enrolledAt   DateTime  @default(now())
  completedAt  DateTime?
  progress     Float     @default(0)
  lastAccessed DateTime  @default(now())

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id          String    @id @default(cuid())
  completed   Boolean   @default(false)
  watchTime   Int       @default(0) // in seconds
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId  String
  course    Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]
  attempts  QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id            String   @id @default(cuid())
  question      String
  options       Json // Array of options
  correctAnswer Int // Index of correct answer
  explanation   String?
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  score       Float
  answers     Json // User's answers
  completedAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  title       String
  description String
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum NotificationType {
  ASSIGNMENT
  LESSON
  ACHIEVEMENT
  COURSE_UPDATE
}
